#!/usr/bin/env bash

# login to mongo with credentials
# [$1] host (127.0.0.1 otherwise)
# [$2] port (27017 otherwise)
# [$3] username
# [$4] password
# [$5] authentication database
mongo_login() {
    if [ -z $3 ]; then
        mongo --host ${1-127.0.0.1} --port ${2-27107}
    else
        mongo --host ${1-127.0.0.1} --port ${2-27107} -u "$3" -p "$4" --authenticationDatabase "$5"
    fi
}

#export and import db.collection
transfer_db() {
    if [ -z $4 ]; then
        echo "usage: $0 db collection source_host source_port [dest host] [dest port]"
    else
        local source_host=${3}
        local source_port=${4}

        local dest_host=${5-localhost}
        local dest_port=${6-27017}

        mongoexport --host ${source_host} --port ${source_port} --db $1 --collection $2 | mongoimport --host ${dest_host} --port ${dest_port} --db $1 --collection $2
    fi
}

# read bson file and output to json
# $1 bson file
bson_to_json() {
    bsondump --quiet --type=json $1
}

# read bson and output to json (pretty printing)
# $1 bson file
bson_to_json_pretty() {
    bsondump --quiet --type=json --pretty $1
}

# binary export the database limiting the output
# $1 database
# $2 collection
# $3 output path
# $4 starting from day (format: YYYY-MM-DD)
# $5 document field with date
# [$5] host (localhost otherwise)
# [$6] port (27017 otherwise)
dump_db_collection_from() {
    mongodump --host ${6-localhost} --port ${7-27107} --db "$1" --collection "$2" --query "{\"$5\":{\"\$gt\":{\"\$date\": $(date -d $4 +%s)000}}}" --out "$3"
}

# todo: rethink if this is useful in any kind
# given bson file, import it to mongo
# $1 db name
# $2 collection name
# $3 bson file name
# $4 host
# $5 port
#import_db_from_bson() {
#    bson_to_json $3 | mongoimport --host $4 --port $5 --db $1 --collection $2
#}

# scan directory containing mongo dbs and import them to given mongo instance
# $1 directory name
# $2 collection name
#import_collection_from_dbs_from_bson() {
#    find $1 -maxdepth 1 -type d -exec import_db_from_bson {} \;
#}

# restore dumped dbs using directory names as db names
# $1 directory name
# [$2] dest host (localhost otherwise)
# [$3] dest port (27017 otherwise)
restore_dbs() {
    find $1 -maxdepth 1 -type d -exec mongorestore --host ${2-localhost} --port ${3-27017} {} \;
}

# drops all dbs that match given prefix
drop_dbs_matching_prefix() {
    mongo --host ${3-localhost} --port ${4-27017} --eval "var prefix='$1'" ${2-db/mongodb/drop_by_prefix.js}
}
_drop_dbs_matching_prefix() {
    _arguments \
        "1:collections prefix" \
        "2:[drop script] db/mongodb/drop_by_prefix.js by default" \
        "3:[host] localhost otherwise" \
        "4:[port] 27017 otherwise"
}
compdef _drop_dbs_matching_prefix drop_dbs_matching_prefix

# shows indexes for collection
# $1 db
# $2 collection
# [$3] host
# [$4] port
mongo_show_collection_indexes() {
    mongo --host ${3-localhost} --port ${4-27017} $1 --eval "var collection='$2'" db/mongodb/show_indexes.js
}

#show all dbs stats in kb
mongo_show_all_dbs_stats() {
    mongo --host ${3-localhost} --port ${4-27017} ${1-db/mongodb/show_stats.js}
}
_mongo_show_all_dbs_stats() {
    _arguments \
        "1:[stat script] db/mongodb/show_stats.js by default" \
        "2:[host] localhost otherwise" \
        "3:[port] 27017 otherwise"
}
compdef _mongo_show_all_dbs_stats mongo_show_all_dbs_stats
