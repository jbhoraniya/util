#!/usr/bin/env bash

SEC_UTIL_LOC="$(dirname $(readlink -f $0))"

# Generate keypair, creates homedir if not exists
# [$1] key homedir (~/.gnupg otherwise)
gpg_gen_key() {
    if [ -z $1 ]; then
        gpg --gen-key
    else
        mkdir -p $1
        chmod 0700 $1
        gpg --gen-key --homedir $1
    fi
}

# $1 keyname
# $2 key homedir
gpg_export_key() {
    gpg --homedir ${2-~/.gnupg} --armor --export $1 > $1.pub.gpg
}

gpg_export_secret_key() {
  gpg --homedir ${2-~/.gnupg} --armor --export-secret-keys $1 > $1.gpg
}

# $1 key filename
# [$2] homedir (~/.gnupg otherwise)
gpg_import_key() {
    gpg --homedir ${2-~/.gnupg} --import $1
}

# Encrypt given plain text
# $1 string to encrypt
# $2 key name (not filename)
# [$3] homedir (~/.gnupg otherwise)
gpg_encrypt_string() {
    echo -n "$1" | gpg --homedir ${3-~/.gnupg} --armor --batch --trust-model always --encrypt -r $2
}

# decrypt multiple PGP-encrypted file contents
gpg_decrypt_file() {
  awk -f $SEC_UTIL_LOC/gpg_decrypt.awk $1
}

gpg_encrypt_file() {
  awk -f $SEC_UTIL_LOC/gpg_encrypt.awk -v keyname="$2" $1
}

gpg_list_keys() {
  gpg --homedir ${1-~/.gnupg} --list-keys
}
