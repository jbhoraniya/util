#!/usr/bin/env bash


# create container
# $1 config file
# $2 name
# [$3] OS (debian otherwise)
# [$4] OS major (stretch otherwise)
# [$5] arch (amd64 otherwise)
# [$6] backing store (best otherwise)
create_container() {
    lxc-create -B ${6-best} -f $1 -t ${3-debian} -n $2 -- -r ${4-stretch} -a ${5-amd64}
}

# completely purge container
# $1 container name
purge_container() {
    lxc-stop -n $1
    lxc-wait -n $1 -s STOPPED
    lxc-destroy -n $1
}

#start container and wait for it
# $1 already created container name
start_container() {
    lxc-start -n $1 -d
    lxc-wait -n $1 -s RUNNING
}

#starts container and waits not only for RUNNING state but also for IP
# $1 already created container name
start_container_waiting_for_network() {
    lxc-start -n $1 -d
    lxc-wait -n $1 -s RUNNING
    local timeout_sec=60
    local cmd="until lxc-info -n $1 | grep -m 1 \"IP:\"; do sleep 1 ; done"
    timeout $timeout_sec bash -c -- "$cmd"
}

#stops container and waits for STOPPED state
# $1 container name
stop_container() {
    lxc-stop -n $1
    lxc-wait -n $1 -s STOPPED
}

# Copy container to standard location
# $1 container name
copy_container() {
    lxc-copy -n $1 -N $1_bak
}

lxc_ensure_ssh_key() {
    #use tilde expansion to get arbitrary user home directory
    local user_home=$(eval echo "~$1")
    #remove previous association if any
    ssh-keygen -f $user_home/.ssh/known_hosts -R $2
    #ssh-keygen could change the ownership if run by superuser
    chown $1.$1 $user_home/.ssh/known_hosts
    cat $user_home/.ssh/${4-id_rsa.pub} >> $3/.ssh/authorized_keys
}

####################
# display operations
####################

show_lxc_running() {
    lxc-ls --active
}

show_lxc_all() {
    lxc-ls --fancy
}

show_detailed_info() {
    lxc-info -n $1
}
