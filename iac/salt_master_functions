#!/usr/bin/env bash


#
# salt-master utils
#

# remotely remove master's key from minion
# $1 minion id
# [$2] minion_master key location on minion (otherwise: /etc/salt/pki/minion/minion_master.pub for linux, C:\salt\conf\pki\minion\minion_master.pub for windows)
salt_rekey_minion() {
    local os=$(salt "$1" grains.get os)
    if [[ $os == *"Windows"* ]]; then
        # doesn't work - key is recreated immediately
        salt "$1" cmd.run "del ${2-C:\salt\conf\pki\minion\minion_master.pub}"
    else
        salt "$1" cmd.run "rm -rf ${2-/etc/salt/pki/minion/minion_master.pub}"
    fi

    salt-key -d "$1"
}

salt_running_jobs() {
    salt-run jobs.active
}

salt_show_highstate_details() {
    salt-run jobs.list_jobs search_function='state.highstate'
}

salt_job_details() {
    salt-run jobs.list_job $1
}
_salt_job_details() {
    _arguments \
     "1:jid"
     # todo jid completions
}
compdef _salt_job_details salt_job_details

# list files on master file server
# useful to debug per env file locations
# $1 saltenv
salt_show_fileserver() {
    salt-run fileserver.file_list saltenv=${1-base}
}

# show complete state that will be applied (rendered state)
# $1 state to display
# [$2] saltenv (base otherwise)
salt_show_sls() {
    if [ -z $1 ]; then
        echo "usage: $0 <state> [saltenv]"
        return 1
    fi
    salt '*' state.show_sls $1 saltenv=${2-base}
}

salt_refresh_pillar() {
    salt '*' saltutil.refresh_pillar
}

salt_sync() {
    salt '*' saltutil.sync_all
}

salt_update_gitfs() {
    salt-run fileserver.update
}
