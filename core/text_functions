#!/usr/bin/env bash

# Substitute all variables (marked as %prefixVariable%) in file to corresponding $prefixVariable
# It works in the following way:
# 1. generate all variable completion for given as argument prefix (compgen -v)
# 2. transform them to sed substitute arguments (-e)
# 3. build the full sed command as string
# 4. eval command
# In order to get rid of eval command: find a way to expand variables returned from awk command ($prefixVariable)
# because they are not expanded strings: -e s/%prefixVariable%/$prefixVariable/g instead of -e s/%prefixVariable%/concreteValue/g
# $1 variable prefix
# $2 file path
substenv_file() {
    local out=$(compgen -v $1 | awk '{ print "-e \"s;%" $1 "%;$" $1 ";g\"" }' | tr '\n' ' ')
    # | xargs sed $2 it won't expand variables
    eval "sed $out $2"
}

# remove line from file
# $1 file name
# $2 line no
rem_line() {
    sed -i -e "$2d" $1
}

# convert string to its ASCII codes in hexadecimal, removing all spaces from the output hexstring
# $1 string
string_to_hex_trimmed() {
    # -e ':a;N;$!ba;s/\n//g' removes nl from input string
    echo -n "$1" | od -A n -t x1 -v | sed -e ':a;N;$!ba;s/\n//g' | sed -e 's/ //g'
}

# convert string to its ASCII codes in hexadecimal
# $1 string
string_to_hex() {
    echo -n "$1" | od -A n -t x1
}

parse_yaml() {
  # based on https://gist.github.com/briantjacobs/7753bf850ca5e39be409#file-yaml-sh
  if [ -n "$ZSH_VERSION" ]; then
    # for ZSH, due to complex sed expression (brackets)
    emulate -L ksh
  fi

  local prefix=$2
  local s='[[:space:]]*'
  local w='[a-zA-Z0-9_]*'
  local fs=$(echo @|tr @ '\034')
  # print matching only and match again (essentially filter out comments)
  sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
  awk -F"$fs" '{
    indent = length($1)/2;
    vname[indent] = $2;
    # clear previous keys as already printed, new higher order key incoming
    for (i in vname) {if (i > indent) {delete vname[i]}}
    if (length($3) > 0) {
        # value exists, print full key with _
        vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
        printf("%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, $3);
    }
  }' | sed 's/_=/+=/g'
}
